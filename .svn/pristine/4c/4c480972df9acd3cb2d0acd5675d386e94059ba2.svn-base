<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2015/9/29
 * Time: 14:22
 */

namespace frontend\models;
use \yii\db\ActiveRecord;
use common\widgets;
use common\widgets\GlobalArray;
use common\widgets\Variable;

class Order extends  ActiveRecord
{
    /*
 * 根据订单状态---待支付
 */
    public function findByStatus($orderId,$userId){
        $OrderStaus = Order::find()->where(array('orderStatus' => $orderId,'userId'=>$userId))->orderBy(['orderTime'=>SORT_DESC])->all();
        if (!$OrderStaus) {
            return false;
        }
        return $OrderStaus;
    }

    /*
* 根据订单id取消订单---待支付
*/
    public function findByCancel($orderId,$userId){
        $OrderCancel = Order::find()->where(array('id' => $orderId,'userId'=>$userId))->one();
//        $OrderCancel = Order::findOne($orderId);
        $OrderCancel->orderStatus=widgets\GlobalArray::$orderStateConstantArray['hasCancel'];
        $OrderCancel->update();
    }

    /*
* 根据订单id---待评价
*/
    public function findByConfirm($orderId,$userId){
        $OrderConfirm = Order::find()->where(array('id' => $orderId,'userId'=>$userId))->one();
        $OrderConfirm->orderStatus=widgets\GlobalArray::$orderStateConstantArray['completed'];
        $OrderConfirm->update();
    }

    /*
* 根据订单id申请退货订单列表
*/
    public function findByOrderReturn($returnId,$userId,$returnStatus){
        $OrderReturn = Order::find()->where(array('id' => $returnId,'userId'=>$userId,'orderStatus'=>$returnStatus))->one();
        if (!$OrderReturn) {
           return false;
        }
        return $OrderReturn;
    }

    //根据订单id和订单状态查询订单关联的信息
    public function findByIdOrderReturnDetail($id,$userId,$returnStatus)
    {
        $OrderReturnDetail = Order::findBySql("select or.id,or.count,ca.money,cp.productName,cp.productLogo,cp.origin,cp.artsId,cp.productPrice,cp.productStock from mp_cart ca LEFT JOIN mp_product cp ON ca.productId = cp.id where ca.userId =".$userId." order By ca.addTime DESC ")->asArray()->all();
    }

    /*
* 根据订单id申请退货填写原因
*/
    public function findByOrderReturnEdit($returnId,$userId,$returnStatus,$returnModel){
        date_default_timezone_set('Asia/Shanghai');
        $refundApplyTime = date('Y-m-d H:i:s',time());
        $ReturnEdit = Order::find()->where(array('id' => $returnId,'userId'=>$userId,'orderStatus'=>$returnStatus))->one();
        $ReturnEdit->isRefund = widgets\GlobalArray::$orderIsRefundArray['Application'];
        $ReturnEdit->refundStatus = widgets\GlobalArray::$orderRefundStatusArray['0'];
        $ReturnEdit->refundReason = $returnModel->refundReason;
        $ReturnEdit->refundApplyTime = $refundApplyTime;
        $ReturnEdit->update();
    }

    //生成订单
    public function insertOrder($orderNo,$orderMoney,$orderStatus,$orderPayMethod,$comeFrom,$userId,$addressId)
    {
        date_default_timezone_set('Asia/Shanghai');
        $orderTime = date('Y-m-d H:i:s',time());
        $order = new Order();
        $order->orderNo = $orderNo;
        $order->orderMoney = $orderMoney;
        $order->orderStatus = $orderStatus;
        $order->orderTime = $orderTime;
        $order->orderPayMethod = $orderPayMethod;
        $order->comeFrom = $comeFrom;
        $order->userId = $userId;
        $order->addressId = $addressId;
        $order->insert();
    }

    //根据订单id更新订单状态等
    public function findByIdUpdateData($id,$orderStatus)
    {
        date_default_timezone_set('Asia/Shanghai');
        $orderTime = date('Y-m-d H:i:s',time());
        $orderUpdate = Order::find()->where(array('id' => $id))->one();
      if($orderStatus==GlobalArray::$orderStateConstantArray['waitDelivery']){
          $orderUpdate->orderStatus = $orderStatus;
          $orderUpdate->orderPayMethod = Variable::$orderPayMethod_alipay;
          $orderUpdate->orderPayTime = $orderTime;
          $orderUpdate->update();
          exit;
      }
        if($orderStatus==GlobalArray::$orderStateConstantArray['hasDelivery']){
            $orderUpdate->orderStatus = $orderStatus;
            $orderUpdate->update();
            exit;
        }
        if($orderStatus==GlobalArray::$orderStateConstantArray['waitEvaluate']){
            $orderUpdate->orderStatus = $orderStatus;
            $orderUpdate->update();
            exit;
        }
        if($orderStatus==GlobalArray::$orderStateConstantArray['completed']){
            $orderUpdate->orderStatus = $orderStatus;
            $orderUpdate->update();
            exit;
        }
        if($orderStatus==GlobalArray::$orderStateConstantArray['hasCancel']){
            $orderUpdate->orderStatus = $orderStatus;
            $orderUpdate->update();
            exit;
        }
    }

    // 获取订单所属用户
    public function getUser()
    {
        //同样第一个参数指定关联的子表模型类名
        //
        return $this->hasOne(User::className(), ['id' => 'userId']);
    }

    // 获取订单中所有产品详情
    public function getProductDetail()
    {
        //同样第一个参数指定关联的子表模型类名
        //
        return $this->hasMany(OrderDetail::className(), ['orderId' => 'id']);
    }

    // 根据订单id和用户id查询信息
    public function findOrderId($id,$userId,$orderStatus)
    {
        $OrderAll = Order::find()->where(array('id' => $id,'userId'=>$userId,'orderStatus'=>$orderStatus))->one();
        if (!$OrderAll) {
            return false;
        }
        return $OrderAll;
    }
}
?>